# # Environment variables declared in this file are automatically made available to Prisma.
# # See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# # Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# # See the documentation for all the connection string options: https://pris.ly/d/connection-strings

# DATABASE_URL="mongodb+srv://micktreemandown:mick11645213@cluster0.mvgs7sg.mongodb.net/travel_tails"
DATABASE_URL="postgresql://postgres:Mick11645213@localhost:5432/traveltails"
SECRET="SECRETEIEI"
NEXTAUTH_URL="http://localhost:3000"


# # DB_CONN_STRING="mongodb+srv://micktreemandown:mick11645213@cluster0.mvgs7sg.mongodb.net/travel_tails"
# # DB_NAME="traval_tails"

# # SECRET="SECRETEIEI"
# # NEXTAUTH_URL="http://localhost:3000"

# const express = require('express');
# const mongoose = require('mongoose');
# const bodyParser = require('body-parser');

# const app = express();

# // เชื่อมต่อ MongoDB
# mongoose.connect('mongodb+srv://micktreemandown:mick11645213@cluster0.mvgs7sg.mongodb.net/travel_tails', { useNewUrlParser: true, useUnifiedTopology: true });

# // สร้างโครงสร้างข้อมูลสำหรับโรงแรม
# const hotelSchema = new mongoose.Schema({
#   title: String,
#   salePrice: Number,
#   description: String,
#   // เพิ่มฟิลด์อื่น ๆ ตามต้องการ
# });

# const Hotel = mongoose.model('Hotel', hotelSchema);

# app.use(bodyParser.urlencoded({ extended: true }));
# app.use(bodyParser.json());

# // สร้าง endpoint สำหรับการบันทึกข้อมูลโรงแรมใหม่
# app.post('/api/hotels', async (req, res) => {
#   try {
#     const { title, salePrice, description } = req.body;
#     // สร้าง instance ของโรงแรม
#     const hotel = new Hotel({
#       title,
#       salePrice,
#       description,
#       // เพิ่มข้อมูลอื่น ๆ ตามต้องการ
#     });
#     // บันทึกข้อมูลลงในฐานข้อมูล
#     await hotel.save();
#     res.status(201).json({ message: 'Hotel created successfully' });
#   } catch (error) {
#     console.error('Error creating hotel:', error);
#     res.status(500).json({ error: 'Server error' });
#   }
# });

# app.listen(3000, () => {
#   console.log('Server
